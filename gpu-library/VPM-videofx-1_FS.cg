/***********************************************************************
File: TD10-fx1-modele-FS.cg

Rendu Graphique Avancé RGA
Master Professionnel d'informatique
Christian Jacquemin, Université Paris 11

Copyright (C) 2004 University Paris 11 
This file is provided without support, instruction, or implied
warranty of any kind.  University Paris 11 makes no guarantee of its
fitness for a particular purpose and is not liable under any
circumstances for any damages or loss whatsoever arising from the use
or inability to use this file or items derived from it.
*************************************************************************/

// Main shader.
float4 laplacian_simple(float2 decalCoords, uniform samplerRECT decal)
{

  float4 color;
 color = 0.5 + 8 * texRECT(decal, decalCoords)
                - texRECT(decal, decalCoords + float2(0,1))
                - texRECT(decal, decalCoords + float2(1,0))
                - texRECT(decal, decalCoords + float2(0,-1))
                - texRECT(decal, decalCoords + float2(-1,0))
                - texRECT(decal, decalCoords + float2(-1,-1))
                - texRECT(decal, decalCoords + float2(-1,1))
                - texRECT(decal, decalCoords + float2(1,-1))
                - texRECT(decal, decalCoords + float2(1,1));

 color.a = 1;
 return (color);
}

float4 bitmap(float2 decalCoords, uniform samplerRECT decal) {
  float seuil=0.5;
  float4 color = texRECT(decal, decalCoords);
  if((color.x + color.y + color.z)/3 >seuil) return float4(1,1,1,1);
  else return float4(0,0,0,1);
}

float4 nivo2gris (float2 decalCoords, uniform samplerRECT decal) {
  float4 color = texRECT(decal, decalCoords);
  float grey = (color.x + color.y + color.z)/3.0;
  return float4(grey, grey, grey, 1);
}

float4 main(
            // obtained from Vertex Program
           in float2 decalCoords       : TEXCOORD0,  // coord text
           in float4 HPosition      : POSITION,
          // passed by the C program
           uniform float   image_size_x,                        // image size
           uniform float   image_size_y,                        // image size
           uniform samplerRECT   decal,           // sortie de la precedente
           uniform samplerRECT   aux             // 2e Image de reference
           ) : COLOR
{
  // A FAIRE: effect 1
  float4 output = nivo2gris(decalCoords, decal);
  
  // retourne le resultat du filtrage de Sobel
  return float4(output.rgb,1);
}

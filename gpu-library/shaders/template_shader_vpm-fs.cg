/***********************************************************************
File: template_shader_vpm-fs.cg

Rendu Graphique Avancé RGA
Master Professionnel d'informatique
Christian Jacquemin, Université Paris 11
JM Vezien LIMSI-CNRS

Copyright (C) 2010 University Paris 11 
This file is provided without support, instruction, or implied
warranty of any kind.  University Paris 11 makes no guarantee of its
fitness for a particular purpose and is not liable under any
circumstances for any damages or loss whatsoever arising from the use
or inability to use this file or items derived from it.
*************************************************************************/

// Main shader.


float4 high_pass(float2 decalCoords, uniform samplerRECT decal, bool backg)
{

float4 color;	

	
color = 8.0 * texRECT(decal, decalCoords) -
		(texRECT(decal, decalCoords + float2(0,1))
                + texRECT(decal, decalCoords + float2(1,0))
                + texRECT(decal, decalCoords + float2(0,-1))
                + texRECT(decal, decalCoords + float2(-1,0))
		+ texRECT(decal, decalCoords + float2(-1,-1))
		+ texRECT(decal, decalCoords + float2(-1,1))
		+ texRECT(decal, decalCoords + float2(1,-1))
		+ texRECT(decal, decalCoords + float2(1,1)));

if (backg) // with original image
	color += texRECT(decal, decalCoords);
else  // high-pass only, no energy
	color += 0.5;

return (color);
}


bool TwoSort(float4 a, float4 b) { 

    if (a.r < b.r) 
		return false;
	else {
	float4 tmp = a;
	a = b;
	b = tmp;
	return true;
    }
}

float4 median_filter(float2 decalCoords, uniform samplerRECT decal)
{
     float4 color;
     float4 color_n[9];	
	// get the neighbourhood array in 1D array
	int index[9][2] = {{-1,-1},{0,-1},{1,-1},{-1,0},{0,0},{1,0},{-1,1},{0,1},{1,1}};

     for (int n = 0; n <9; n++)
	color_n[n] = texRECT(decal, decalCoords+float2(index[n][0],index[n][1]));

	
     for (int n = 8; n ; --n) {
  	for (int i = 0; i < n; ++i) {
           TwoSort (color_n[i], color_n[i+1]);
        }
     }

    color = color_n[5];

return (color);

}




float4 low_pass(float2 decalCoords, uniform samplerRECT decal)
{

float4 color;	
color = 0.111 * (texRECT(decal, decalCoords)
                + texRECT(decal, decalCoords + float2(0,1))
                + texRECT(decal, decalCoords + float2(1,0))
                + texRECT(decal, decalCoords + float2(0,-1))
                + texRECT(decal, decalCoords + float2(-1,0))
		+ texRECT(decal, decalCoords + float2(-1,-1))
		+ texRECT(decal, decalCoords + float2(-1,1))
		+ texRECT(decal, decalCoords + float2(1,-1))
		+ texRECT(decal, decalCoords + float2(1,1)));
return (color);
}

float4 main(
           // obtained from Vertex Program
           float2 decalCoords       : TEXCOORD0,  // coord texture locale du pixel : son (i,j)

	   // passed by the C programm
           uniform samplerRECT   decal,           // Image de reference (le contenu de l'image)
           uniform sampler2D     transfer         // Fonction de transfert
	   ) : COLOR
{

	float4 color;	

// low pass (mean) filtering

  
//color = low_pass(decalCoords,decal);


// high pass filtering with/without background

//color = high_pass(decalCoords,decal,true);

color = median_filter(decalCoords,decal);

    return saturate(color);
}


